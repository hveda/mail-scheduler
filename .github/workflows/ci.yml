name: CI/CD Pipeline
permissions:
  contents: read

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        python-version: [3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov
        pip install markupsafe  # Ensure markupsafe is installed for Markup
        pip install -e .
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # Run flake8 check on all files
        flake8 app tests --count --show-source --statistics
        # Strict check for critical errors
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Type check with mypy
      run: |
        pip install mypy
        mypy --ignore-missing-imports app/
      continue-on-error: true  # Optional: set to false once all type errors are fixed
    
    - name: Test with pytest
      env:
        FLASK_APP: serve.py
        FLASK_DEBUG: 1
        APP_SETTINGS: TestingConfig
        SECRET_KEY: test-secret-key
        POSTGRES_HOST: localhost
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: postgres
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: |
        # Run tests with detailed output and coverage report
        pytest --cov=app --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        verbose: true

  docker:
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag mail-scheduler:$(date +%s)
    
    - name: Run Docker Compose
      run: |
        docker-compose up -d
        sleep 10  # Wait for containers to start
        docker-compose ps
        docker-compose logs
        docker-compose down
